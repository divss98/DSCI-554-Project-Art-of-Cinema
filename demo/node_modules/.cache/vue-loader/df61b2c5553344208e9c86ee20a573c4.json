{"remainingRequest":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/src/views/CodePen.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/src/views/CodePen.vue","mtime":1637372458039},{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/css-loader/dist/cjs.js","mtime":1636918451129},{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1636918451385},{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/postcss-loader/src/index.js","mtime":1636918451187},{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/cache-loader/dist/cjs.js","mtime":1636918450991},{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/vue-loader/lib/index.js","mtime":1636918451281}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubm9kZSB7CgljdXJzb3I6IHBvaW50ZXI7Cn0KCi5ub2RlIGNpcmNsZSB7CiAgZmlsbDogI2ZmZjsKICBzdHJva2U6IHN0ZWVsYmx1ZTsKICBzdHJva2Utd2lkdGg6IDNweDsKfQoKLm5vZGUgdGV4dCB7CiAgZm9udDogMTJweCBzYW5zLXNlcmlmOwp9CgoubGluayB7CiAgZmlsbDogbm9uZTsKICBzdHJva2U6ICNjY2M7CiAgc3Ryb2tlLXdpZHRoOiAycHg7Cn0KCiAgIA=="},{"version":3,"sources":["CodePen.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6NA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"CodePen.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div id = \"app\">\n  <div class=\"codepen\"></div>\n  </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\nimport {hierarchy} from 'd3-hierarchy';\nexport default {\n  name: \"CodePen\",\n  data() {\n      return {\n      chartData: null,\n    }\n  },\n  mounted() {\n    // create the map after the component is mounted\n    this.createCodePen();\n  },\n  methods: {\n    createCodePen() {\n        console.log(\"it is working\")\n      var treeData = [\n        {\n          name: \"Top Level\",\n          parent: \"null\",\n          children: [\n            {\n              name: \"Level 2: A\",\n              parent: \"Top Level\",\n              children: [\n                {\n                  name: \"Son of A\",\n                  parent: \"Level 2: A\",\n                },\n                {\n                  name: \"Daughter of A\",\n                  parent: \"Level 2: A\",\n                },\n              ],\n            },\n            {\n              name: \"Level 2: B\",\n              parent: \"Top Level\",\n            },\n          ],\n        },\n      ];\n\n      // ************** Generate the tree diagram\t *****************\n      var margin = { top: 20, right: 120, bottom: 20, left: 120 },\n        width = 960 - margin.right - margin.left,\n        height = 500 - margin.top - margin.bottom;\n\n      var i = 0,\n        duration = 750,\n        root;\n\n      var tree = d3.tree().size([height, width]);\n\n    //   var diagonal = d3.svg.diagonal().projection(function (d) {\n    //     return [d.y, d.x];\n    //   });\n\n    var diagonal = d3.linkHorizontal() \n        .x(function(d) { return d.y;})\n        .y(function(d) { return d.x;})\n\n      var svg = d3\n        .select(\"#codepen\")\n        .append(\"svg\")\n        .attr(\"width\", width + margin.right + margin.left)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      root = treeData[0];\n      root.x0 = height / 2;\n      root.y0 = 0;\n\n      update(root);\n\n      d3.select(self.frameElement).style(\"height\", \"500px\");\n\n      function update(source) {\n        // Compute the new tree layout.\n        // var nodes = tree.nodes(root).reverse(),\n        //   links = tree.links(nodes);\n\n        var treeRoot = hierarchy(root)\n        tree(treeRoot)\n        var nodes = treeRoot.descendants()\n        var links = treeRoot.links()\n\n        // Normalize for fixed-depth.\n        nodes.forEach(function (d) {\n          d.y = d.depth * 180;\n        });\n\n        // Update the nodes…\n        var node = svg.selectAll(\"g.node\").data(nodes, function (d) {\n          return d.id || (d.id = ++i);\n        });\n\n        // Enter any new nodes at the parent's previous position.\n        var nodeEnter = node\n          .enter()\n          .append(\"g\")\n          .attr(\"class\", \"node\")\n          .attr(\"transform\", function () {\n            return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n          })\n          .on(\"click\", click);\n\n        nodeEnter\n          .append(\"circle\")\n          .attr(\"r\", 1e-6)\n          .style(\"fill\", function (d) {\n            return d._children ? \"lightsteelblue\" : \"#fff\";\n          });\n\n        nodeEnter\n          .append(\"text\")\n          .attr(\"x\", function (d) {\n            return d.children || d._children ? -13 : 13;\n          })\n          .attr(\"dy\", \".35em\")\n          .attr(\"text-anchor\", function (d) {\n            return d.children || d._children ? \"end\" : \"start\";\n          })\n          .text(function (d) {\n            return d.name;\n          })\n          .style(\"fill-opacity\", 1e-6);\n\n        // Transition nodes to their new position.\n        var nodeUpdate = node\n          .transition()\n          .duration(duration)\n          .attr(\"transform\", function (d) {\n            return \"translate(\" + d.y + \",\" + d.x + \")\";\n          });\n\n        nodeUpdate\n          .select(\"circle\")\n          .attr(\"r\", 10)\n          .style(\"fill\", function (d) {\n            return d._children ? \"lightsteelblue\" : \"#fff\";\n          });\n\n        nodeUpdate.select(\"text\").style(\"fill-opacity\", 1);\n\n        // Transition exiting nodes to the parent's new position.\n        var nodeExit = node\n          .exit()\n          .transition()\n          .duration(duration)\n          .attr(\"transform\", function () {\n            return \"translate(\" + source.y + \",\" + source.x + \")\";\n          })\n          .remove();\n\n        nodeExit.select(\"circle\").attr(\"r\", 1e-6);\n\n        nodeExit.select(\"text\").style(\"fill-opacity\", 1e-6);\n\n        // Update the links…\n        var link = svg.selectAll(\"path.link\").data(links, function (d) {\n          return d.target.id;\n        });\n\n        // Enter any new links at the parent's previous position.\n        link\n          .enter()\n          .insert(\"path\", \"g\")\n          .attr(\"class\", \"link\")\n          .attr(\"d\", function () {\n            var o = { x: source.x0, y: source.y0 };\n            return diagonal({ source: o, target: o });\n          });\n\n        // Transition links to their new position.\n        link.transition().duration(duration).attr(\"d\", diagonal);\n\n        // Transition exiting nodes to the parent's new position.\n        link\n          .exit()\n          .transition()\n          .duration(duration)\n          .attr(\"d\", function () {\n            var o = { x: source.x, y: source.y };\n            return diagonal({ source: o, target: o });\n          })\n          .remove();\n\n        // Stash the old positions for transition.\n        nodes.forEach(function (d) {\n          d.x0 = d.x;\n          d.y0 = d.y;\n        });\n      }\n\n      // Toggle children on click.\n      function click(d) {\n        if (d.children) {\n          d._children = d.children;\n          d.children = null;\n        } else {\n          d.children = d._children;\n          d._children = null;\n        }\n        update(d);\n      }\n    },\n  },\n};\n</script>\n\n <style>\n\t\n\t.node {\n\t\tcursor: pointer;\n\t}\n\n\t.node circle {\n\t  fill: #fff;\n\t  stroke: steelblue;\n\t  stroke-width: 3px;\n\t}\n\n\t.node text {\n\t  font: 12px sans-serif;\n\t}\n\n\t.link {\n\t  fill: none;\n\t  stroke: #ccc;\n\t  stroke-width: 2px;\n\t}\n\t\n    </style>"]}]}