{"remainingRequest":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/src/views/CodePen.vue?vue&type=style&index=0&id=2f5ca8a2&scoped=true&lang=css&","dependencies":[{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/src/views/CodePen.vue","mtime":1637373342846},{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/css-loader/dist/cjs.js","mtime":1636918451129},{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1636918451385},{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/postcss-loader/src/index.js","mtime":1636918451187},{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/cache-loader/dist/cjs.js","mtime":1636918450991},{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/vue-loader/lib/index.js","mtime":1636918451281}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubm9kZSBjaXJjbGUgewogIGZpbGw6ICNmZmY7CiAgc3Ryb2tlOiBzdGVlbGJsdWU7CiAgc3Ryb2tlLXdpZHRoOiAzcHg7Cn0KCi5ub2RlIHRleHQgewogIGZvbnQ6IDEycHggc2Fucy1zZXJpZjsKfQoKLmxpbmsgewogIGZpbGw6IG5vbmU7CiAgc3Ryb2tlOiAjY2NjOwogIHN0cm9rZS13aWR0aDogMnB4Owp9Cg=="},{"version":3,"sources":["CodePen.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgOA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"CodePen.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div id=\"app\">\n    <div id=\"codepen\"></div>\n  </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\n\nexport default {\n  name: \"CodePen\",\n  data() {\n    return {\n      chartData: null,\n    };\n  },\n  mounted() {\n    // create the map after the component is mounted\n    this.createCodePen();\n  },\n  methods: {\n    createCodePen() {\n      var treeData =\n  {\n    \"name\": \"Top Level\",\n    \"children\": [\n      { \n        \"name\": \"Level 2: A\",\n        \"children\": [\n          { \"name\": \"Son of A\" },\n          { \"name\": \"Daughter of A\" }\n        ]\n      },\n      { \"name\": \"Level 2: B\" }\n    ]\n  };\n\n// Set the dimensions and margins of the diagram\nvar margin = {top: 20, right: 90, bottom: 30, left: 90},\n    width = 960 - margin.left - margin.right,\n    height = 500 - margin.top - margin.bottom;\n\n// append the svg object to the body of the page\n// appends a 'group' element to 'svg'\n// moves the 'group' element to the top left margin\nvar svg = d3.select(\"#codepen\").append(\"svg\")\n    .attr(\"width\", width + margin.right + margin.left)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\"\n          + margin.left + \",\" + margin.top + \")\");\n\nvar i = 0,\n    duration = 750,\n    root;\n\n// declares a tree layout and assigns the size\nvar treemap = d3.tree().size([height, width]);\n\n// Assigns parent, children, height, depth\nroot = d3.hierarchy(treeData, function(d) { return d.children; });\nroot.x0 = height / 2;\nroot.y0 = 0;\n\n// Collapse after the second level\nroot.children.forEach(collapse);\n\nupdate(root);\n\n// Collapse the node and all it's children\nfunction collapse(d) {\n  if(d.children) {\n    d._children = d.children\n    d._children.forEach(collapse)\n    d.children = null\n  }\n}\n\nfunction update(source) {\n\n  // Assigns the x and y position for the nodes\n  var treeData = treemap(root);\n\n  // Compute the new tree layout.\n  var nodes = treeData.descendants(),\n      links = treeData.descendants().slice(1);\n\n  // Normalize for fixed-depth.\n  nodes.forEach(function(d){ d.y = d.depth * 180});\n\n  // ****************** Nodes section ***************************\n\n  // Update the nodes...\n  var node = svg.selectAll('g.node')\n      .data(nodes, function(d) {return d.id || (d.id = ++i); });\n\n  // Enter any new modes at the parent's previous position.\n  var nodeEnter = node.enter().append('g')\n      .attr('class', 'node')\n      .attr(\"transform\", function() {\n        return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n    })\n    .on('click', click);\n\n  // Add Circle for the nodes\n  nodeEnter.append('circle')\n      .attr('class', 'node')\n      .attr('r', 1e-6)\n      .style(\"fill\", function(d) {\n          return d._children ? \"lightsteelblue\" : \"#fff\";\n      });\n\n  // Add labels for the nodes\n  nodeEnter.append('text')\n      .attr(\"dy\", \".35em\")\n      .attr(\"x\", function(d) {\n          return d.children || d._children ? -13 : 13;\n      })\n      .attr(\"text-anchor\", function(d) {\n          return d.children || d._children ? \"end\" : \"start\";\n      })\n      .text(function(d) { return d.data.name; });\n\n  // UPDATE\n  var nodeUpdate = nodeEnter.merge(node);\n\n  // Transition to the proper position for the node\n  nodeUpdate.transition()\n    .duration(duration)\n    .attr(\"transform\", function(d) { \n        return \"translate(\" + d.y + \",\" + d.x + \")\";\n     });\n\n  // Update the node attributes and style\n  nodeUpdate.select('circle.node')\n    .attr('r', 10)\n    .style(\"fill\", function(d) {\n        return d._children ? \"lightsteelblue\" : \"#fff\";\n    })\n    .attr('cursor', 'pointer');\n\n\n  // Remove any exiting nodes\n  var nodeExit = node.exit().transition()\n      .duration(duration)\n      .attr(\"transform\", function() {\n          return \"translate(\" + source.y + \",\" + source.x + \")\";\n      })\n      .remove();\n\n  // On exit reduce the node circles size to 0\n  nodeExit.select('circle')\n    .attr('r', 1e-6);\n\n  // On exit reduce the opacity of text labels\n  nodeExit.select('text')\n    .style('fill-opacity', 1e-6);\n\n  // ****************** links section ***************************\n\n  // Update the links...\n  var link = svg.selectAll('path.link')\n      .data(links, function(d) { return d.id; });\n\n  // Enter any new links at the parent's previous position.\n  var linkEnter = link.enter().insert('path', \"g\")\n      .attr(\"class\", \"link\")\n      .attr('d', function(){\n        var o = {x: source.x0, y: source.y0}\n        return diagonal(o, o)\n      });\n\n  // UPDATE\n  var linkUpdate = linkEnter.merge(link);\n\n  // Transition back to the parent element position\n  linkUpdate.transition()\n      .duration(duration)\n      .attr('d', function(d){ return diagonal(d, d.parent) });\n\n  // Remove any exiting links\n  var linkExit = link.exit().transition()\n      .duration(duration)\n      .attr('d', function() {\n        var o = {x: source.x, y: source.y}\n        return diagonal(o, o)\n      })\n      linkExit.remove();\n\n  // Store the old positions for transition.\n  nodes.forEach(function(d){\n    d.x0 = d.x;\n    d.y0 = d.y;\n  });\n\n  // Creates a curved (diagonal) path from parent to the child nodes\n  function diagonal(s, d) {\n\n  var  path = `M ${s.y} ${s.x}\n            C ${(s.y + d.y) / 2} ${s.x},\n              ${(s.y + d.y) / 2} ${d.x},\n              ${d.y} ${d.x}`\n\n    return path\n  }\n\n  // Toggle children on click.\n  function click(event, d) {\n    if (d.children) {\n        d._children = d.children;\n        d.children = null;\n      } else {\n        d.children = d._children;\n        d._children = null;\n      }\n    update(d);\n  }\n}\n    },\n  },\n};\n</script>\n\n <style scoped>\n.node circle {\n  fill: #fff;\n  stroke: steelblue;\n  stroke-width: 3px;\n}\n\n.node text {\n  font: 12px sans-serif;\n}\n\n.link {\n  fill: none;\n  stroke: #ccc;\n  stroke-width: 2px;\n}\n</style>"]}]}