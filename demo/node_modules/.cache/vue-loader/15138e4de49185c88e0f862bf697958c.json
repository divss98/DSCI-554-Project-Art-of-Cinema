{"remainingRequest":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/src/views/Prop_Symbol_Map.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/src/views/Prop_Symbol_Map.vue","mtime":1638584894769},{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/css-loader/dist/cjs.js","mtime":1636918451129},{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1636918451385},{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/postcss-loader/src/index.js","mtime":1636918451187},{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/cache-loader/dist/cjs.js","mtime":1636918450991},{"path":"/Users/rushishah/Desktop/DSCI_554/PROJECT/project-rad/project-src-vue-app/node_modules/vue-loader/lib/index.js","mtime":1636918451281}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLm5vZGUgY2lyY2xlIHsKICBmaWxsOiAjZmZmOwogIHN0cm9rZTogc3RlZWxibHVlOwogIHN0cm9rZS13aWR0aDogM3B4Owp9Cgoubm9kZSB0ZXh0IHsKICBmb250OiAxMnB4IHNhbnMtc2VyaWY7Cn0KCi5saW5rIHsKICBmaWxsOiBub25lOwogIHN0cm9rZTogI2NjYzsKICBzdHJva2Utd2lkdGg6IDJweDsKfQo="},{"version":3,"sources":["Prop_Symbol_Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiLA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Prop_Symbol_Map.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div id=\"app\">\n    <div><h3>Top 20 regions with the most movies released</h3></div>\n    <svg id=\"proportional-symbol-map\" width=\"1300\" height=\"700\" style=\"background-color: #eee\"></svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\";\n\nexport default {\n  name: \"SymbolMap\",\n  data() {\n    return {\n      chartData: null,\n    };\n  },\n  mounted() {\n    // create the map after the component is mounted\n    this.createSymbolMap();\n  },\n  methods: {\n    createSymbolMap() {\n    var margin = { top: 20, left: 50, bottom: 80, right: 50 };\n    var width = parseInt(d3.select('#proportional-symbol-map').style('width')) - margin.left - margin.right;\n    var height = parseInt(d3.select('#proportional-symbol-map').style('height')) - margin.top - margin.bottom;\n    var svg1 = d3.select('#proportional-symbol-map')\n                .attr('width', width + margin.left + margin.right)\n                .attr('height', height + margin.top + margin.bottom)\n                .append('g')\n                .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')')\n  \n    var color = d3.scaleOrdinal(d3.schemeCategory10)\n\n\n    // country data loaded as data\n    d3.json('region_count.json').then(function(data) {\n        // var max = d3.max(data, function(d) { return d.rate; })\n        // var min = d3.min(data, function(d) { return d.rate; })\n        color.domain(data.map(function(d) { return d.country; }))\n        \n        //data join with features\n        d3.json('world.geo.json').then(function (json) {\n          //console.log(json)\n          var x=data\n          var y=json\n          for (var i = 0; i < x.length; i++) {\n            var dataCountry = x[i].country;\n            var dataRate = x[i].rate*0.05;\n            for (var j = 0; j < y.features.length; j++) {\n              var jsonCountry = y.features[j].properties.name;\n              if (dataCountry == jsonCountry) {\n                json.features[j].properties.rate = dataRate;\n                break;\n              }\n            }\n          }\n          var projection = d3.geoEquirectangular().fitSize([width, height], json);\n          var path = d3.geoPath().projection(projection);\n  \n          //data join with features\n          svg1.append('g')\n              .selectAll('path')\n              .data(json.features)  \n              .enter()\n              .append('path')\n              .attr('fill', function() {\n                return \"white\"\n              })\n              .attr('stroke', 'white')\n              .attr('opacity', 0.9)\n              .attr('d', path)\n              console.log(json.features)\n          svg1.append('g')\n            .selectAll('circle')\n            .data(json.features)\n            .enter()\n            .append('circle')\n            .attr('class', 'circle')\n            .attr('id', function(d){\n              var rate1=d.properties.rate;\n              if(rate1){\n              var co=d.properties.name;\n              var ans=''+co+' '+rate1+'%'\n              //console.log(ans)\n              return ans\n              }\n              else{\n                return \"NAN\"\n              }\n            })\n            .attr('transform', function(d) { return 'translate(' + path.centroid(d) + ')'; })\n            .attr('r', function(d) { \n              if(d.properties.rate) {\n                return 0.1* d.properties.rate;\n              } else {\n                return 0;\n            }})\n            .attr('fill', function(d) { \n              if(d.properties.rate) {\n                return \"red\" ;\n            }})\n            .attr('opacity', 0.65)\n//             .on('mouseover', function(d) {\n//               d3.select(this)\n//               .select('path')\n//               .attr('stroke', 'black')\n//               .attr('stroke-width', 5)\n//               var x=d3.select(this)\n//                   .attr(\"id\")\n//               //.select('#tooltip').transition().duration(1).style('opacity', 1).text(d.country)\n//               if(x!=\"NAN\"){\n//               d3.select(\"#tooltip\")\n//               .style(\"left\", d.pageX + \"px\")\n//               .style(\"top\", d.pageY + \"px\")\n//               .style(\"opacity\", 1)\n//               .select(\"#value\")\n//               .text(x);}\n//   })\n//   .on('mouseout', function(d) {\t\n//             d3.select(this)\n//               .select('path')\n//               .attr('stroke-width', 0)\n//             d3.select('#tooltip')\n//               .style(\"opacity\", 0)})\n//              ;\n              \n          svg1.append('g')\n            .selectAll('text')\n            .data(json.features)\n            .enter()\n            .append('text')\n            .attr('class', 'label')\n            .attr('x', function(d) { return path.centroid(d)[0]; })\n            .attr('y', function(d) { return path.centroid(d)[1]; })\n            .text(function(d) { \n              if (d.properties.rate) return d.properties.name;\n            })\n            .attr('text-anchor','middle')\n            .attr('alignment-baseline', 'middle')\n            .attr('fill', 'black')\n            .style('font-size','20px')\n           \n          // legend\n          var f = d3.format('.1f');\n          var legend = svg1.append('g')\n            .attr('class', 'legend')\n            .attr('transform', 'translate(' + (60) + ',' + (height + 60) + ')')\n            .selectAll('g')\n            .data([100, 50, 25])\n            .enter()\n            .append('g')\n          legend.append('circle')   \n            .attr('cy', function(d) { return -1 * d; })\n            .attr('r', function(d) { return 1 * d; })\n            .attr('stroke' ,'black')\n            .attr('opacity', 0.5)\n            .attr('fill', 'none')\n          legend.append('text')\n            .attr('y', function(d) { return -2 * d; })\n            .attr('dy', '1em')\n            .text(function(d) { return f(d); })\n            .attr('font-size', '10px')\n            .attr('text-anchor','middle')\n          legend.append('text')\n            .text('Top 20 Countries with movie releases')\n            .attr('x', -90)\n            .attr('y', -210)\n        });\n    });\n \n    },\n  },\n};\n</script>\n\n <style>\n.node circle {\n  fill: #fff;\n  stroke: steelblue;\n  stroke-width: 3px;\n}\n\n.node text {\n  font: 12px sans-serif;\n}\n\n.link {\n  fill: none;\n  stroke: #ccc;\n  stroke-width: 2px;\n}\n</style>"]}]}